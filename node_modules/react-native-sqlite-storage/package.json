{
  "_args": [
    [
      {
        "raw": "react-native-sqlite-storage",
        "scope": null,
        "escapedName": "react-native-sqlite-storage",
        "name": "react-native-sqlite-storage",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Sindre\\TestProject"
    ]
  ],
  "_from": "react-native-sqlite-storage@latest",
  "_id": "react-native-sqlite-storage@3.3.4",
  "_inCache": true,
  "_location": "/react-native-sqlite-storage",
  "_nodeVersion": "4.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-sqlite-storage-3.3.4.tgz_1512562653532_0.07585435686632991"
  },
  "_npmUser": {
    "name": "andpor",
    "email": "fkuciapa@yahoo.com"
  },
  "_npmVersion": "3.10.6",
  "_phantomChildren": {
    "util-deprecate": "1.0.2",
    "xmldom": "0.1.27"
  },
  "_requested": {
    "raw": "react-native-sqlite-storage",
    "scope": null,
    "escapedName": "react-native-sqlite-storage",
    "name": "react-native-sqlite-storage",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-sqlite-storage/-/react-native-sqlite-storage-3.3.4.tgz",
  "_shasum": "fb9c6b3af6f6857e62104e6544da396fff80895d",
  "_shrinkwrap": null,
  "_spec": "react-native-sqlite-storage",
  "_where": "C:\\Users\\Sindre\\TestProject",
  "author": {
    "name": "Andrzej Porebski"
  },
  "bugs": {
    "url": "https://github.com/andpor/react-native-sqlite-storage/issues"
  },
  "dependencies": {
    "xcode": "0.8.9"
  },
  "description": "SQLite3 bindings for React Native (Android & iOS)",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "fb9c6b3af6f6857e62104e6544da396fff80895d",
    "tarball": "https://registry.npmjs.org/react-native-sqlite-storage/-/react-native-sqlite-storage-3.3.4.tgz"
  },
  "gitHead": "7787a816f452344a84732accd804ec0217fd9f6d",
  "homepage": "https://github.com/andpor/react-native-sqlite-storage",
  "keywords": [
    "react-native-sqlite-storage",
    "react-native-sqlite",
    "react-component",
    "reactnative",
    "react-native",
    "sqlite",
    "sqlite3",
    "ios",
    "android",
    "promise",
    "cordova-sqlite-storage"
  ],
  "license": "MIT",
  "main": "sqlite.js",
  "maintainers": [
    {
      "name": "andpor",
      "email": "fkuciapa@yahoo.com"
    }
  ],
  "name": "react-native-sqlite-storage",
  "optionalDependencies": {},
  "peerDependencies": {
    "react-native": ">=0.14.0"
  },
  "readme": "# react-native-sqlite-storage\nSQLite3 Native Plugin for React Native for both Android (Classic and Native) and iOS\n\nFoundation of this library is based on Chris Brody's Cordova SQLite plugin.\n\nFeatures:\n  1. iOS and Android supported via identical JavaScript API.\n  2. Android in pure Java and Native modes\n  3. SQL transactions\n  4. JavaScript interface via plain callbacks or Promises.\n  5. Pre-populated SQLite database import from application bundle and sandbox\n\nThere are sample apps provided in test directory that can be used in with the AwesomeProject generated by React Native. All you have to do is to copy one of those files into your AwesomeProject replacing index.ios.js.\n\nPlease let me know your projects that use these SQLite React Native modules. I will list them in the reference section. If there are any features that you think would benefit this library please post them.\n\nThe library has been tested with React 0.43.4 (and earlier) and XCode 7,8 - it works fine out of the box without any need for tweaks or code changes. For XCode 7,8 vs. XCode 6 the only difference is that sqlite ios library name suffix is tbd instead of dylib. \n\nVersion 3.2 is the first version compatible with RN 0.40.\n\n\n# How to use (iOS):\n\n#### Step 1. Install Dependencies\n\n##### With CocoaPods:\n\nThis command should be executed in the root directory of your RN project\n```shell\nnpm install --save react-native-sqlite-storage\n```\nThen add this to your Podfile which should be located inside the ios project subdirectory\n```ruby\npod 'React', :path => '../node_modules/react-native'\npod 'react-native-sqlite-storage', :path => '../node_modules/react-native-sqlite-storage'\n```\nOr use the sample Podfile included in the package by copying it over to ios subdirectory and replacing AwesomeProject inside of it with the name of your RN project.\n\nRefresh the Pods installation\n```ruby\npod install \n```\nOR\n```ruby\npod update \n```\n\n\nDone, skip to Step 2.\n\n##### Without CocoaPods:\n\nThis command should be executed in the root directory of your RN project\n```shell\nnpm install --save react-native-sqlite-storage\nrnpm link\n```\n\nrnpm and xcode are dependencies of this project and should get installed with the module but in case there are issue running rnpm link and rnpm/xcode are not already installed you can try to install it globally as follows:\n```shell\nnpm -g install rnpm xcode\n```\nAfter linking project should like this:\n\n![alt tag](instructions/after-rnpm.png)\n\n#### Step 1a. If rnpm link does not work for you you can try manually linking according to the instructions below:\n\n\n##### Drag the SQLite Xcode project as a dependency project into your React Native XCode project\n\n![alt tag](https://raw.github.com/andpor/react-native-sqlite-storage/master/instructions/libs.png)\n\n##### XCode SQLite libraries dependency set up\n\nAdd libSQLite.a (from Workspace location) to the required Libraries and Frameworks. Also add sqlite3.0.tbd (XCode 7) or libsqlite3.0.dylib (XCode 6 and earlier) in the same fashion using Required Libraries view (Do not just add them manually as the build paths will not be properly set)\n\n![alt tag](https://raw.github.com/andpor/react-native-sqlite-storage/master/instructions/addlibs.png)\n\n#### Step 2. Application JavaScript require\n\nAdd var SQLite = require('react-native-sqlite-storage') to your index.ios.js\n\n![alt tag](instructions/require.png)\n\n#### Step 3. Write application JavaScript code using the SQLite plugin\n\nAdd JS application code to use SQLite API in your index.ios.js etc. Here is some sample code. For full working example see test/index.ios.callback.js. Please note that Promise based API is now supported as well with full examples in the working React Native app under test/index.ios.promise.js\n\n```javascript\nerrorCB(err) {\n  console.log(\"SQL Error: \" + err);\n},\n\nsuccessCB() {\n  console.log(\"SQL executed fine\");\n},\n\nopenCB() {\n  console.log(\"Database OPENED\");\n},\n\nvar db = SQLite.openDatabase(\"test.db\", \"1.0\", \"Test Database\", 200000, openCB, errorCB);\ndb.transaction((tx) => {\n  tx.executeSql('SELECT * FROM Employees a, Departments b WHERE a.department = b.department_id', [], (tx, results) => {\n      console.log(\"Query completed\");\n\n      // Get rows with Web SQL Database spec compliance.\n\n      var len = results.rows.length;\n      for (let i = 0; i < len; i++) {\n        let row = results.rows.item(i);\n        console.log(`Employee name: ${row.name}, Dept Name: ${row.deptName}`);\n      }\n\n      // Alternatively, you can use the non-standard raw method.\n\n      /*\n        let rows = results.rows.raw(); // shallow copy of rows Array\n\n        rows.map(row => console.log(`Employee name: ${row.name}, Dept Name: ${row.deptName}`));\n      */\n    });\n});\n```\n\n# How to use (Android):\n\n#### Step 1 - NPM Install\n\n```shell\nnpm install --save react-native-sqlite-storage\n```\n#### Step 2 - Update Gradle Settings\n\n```gradle\n// file: android/settings.gradle\n...\n\ninclude ':react-native-sqlite-storage'\nproject(':react-native-sqlite-storage').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-sqlite-storage/src/android')\n```\n\n#### Step 3 - Update app Gradle Build\n\n```gradle\n// file: android/app/build.gradle\n...\n\ndependencies {\n    ...\n    compile project(':react-native-sqlite-storage')\n}\n```\n\n#### Step 4 - Register React Package (this should work on React version but if it does not , try the ReactActivity based approach. Note: for version 3.0.0 and below you would have to pass in the instance of your Activity to the SQLitePluginPackage constructor\n\n```java\n...\nimport org.pgsqlite.SQLitePluginPackage;\n\npublic class MainActivity extends Activity implements DefaultHardwareBackBtnHandler {\n\n    private ReactInstanceManager mReactInstanceManager;\n    private ReactRootView mReactRootView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        mReactRootView = new ReactRootView(this);\n        mReactInstanceManager = ReactInstanceManager.builder()\n                .setApplication(getApplication())\n                .setBundleAssetName(\"index.android.bundle\")  // this is dependant on how you name you JS files, example assumes index.android.js\n                .setJSMainModuleName(\"index.android\")        // this is dependant on how you name you JS files, example assumes index.android.js\n                .addPackage(new MainReactPackage())\n                .addPackage(new SQLitePluginPackage())       // register SQLite Plugin here\n                .setUseDeveloperSupport(BuildConfig.DEBUG)\n                .setInitialLifecycleState(LifecycleState.RESUMED)\n                .build();\n        mReactRootView.startReactApplication(mReactInstanceManager, \"AwesomeProject\", null); //change \"AwesomeProject\" to name of your app\n        setContentView(mReactRootView);\n    }\n...\n\n```\n\nAlternative approach on newer versions of React Native (0.18+). Note: for version 3.0.0 and below you would have to pass in the instance of your Activity to the SQLitePluginPackage constructor\n\n```java\nimport org.pgsqlite.SQLitePluginPackage;\n\npublic class MainApplication extends Application implements ReactApplication {\n  ......\n\n  /**\n   * A list of packages used by the app. If the app uses additional views\n   * or modules besides the default ones, add more packages here.\n   */\n    @Override\n    protected List<ReactPackage> getPackages() {\n      return Arrays.<ReactPackage>asList(\n        new SQLitePluginPackage(),   // register SQLite Plugin here\n        new MainReactPackage());\n    }\n}\n```\n\n#### Step 5 - Require and use in Javascript - see full examples (callbacks and Promise) in test directory.\n\n```js\n// file: index.android.js\n\nvar React = require('react-native');\nvar SQLite = require('react-native-sqlite-storage')\n...\n```\n\n## Setting up your project to import a pre-populated SQLite database from application for iOS\n\n#### Step 1 - Create 'www' folder.\n\nCreate a folder called 'www' (yes must be called precisely that else things won't work) in the project folder via Finder\n\n#### Step 2 - Create the database file\n\nCopy/paste your pre-populated database file into the 'www' folder. Give it the same name you are going to use in openDatabase call in your application\n\n#### Step 3 - Add file to project\n\nin XCode, right click on the main folder and select Add Files to 'your project name'\n\n![alt tag](https://raw.github.com/andpor/react-native-sqlite-storage/master/instructions/addFilesToProject.png)\n\n#### Step 4 - Choose files to add\n\nIn the Add Files dialog, navigate to the 'www' directory you created in Step 1, select it, make sure you check the option to Create Folder Reference\n\n![alt tag](https://raw.github.com/andpor/react-native-sqlite-storage/master/instructions/addFilesToProjectSelect.png)\n\n#### Step 5 - Verify project structure\n\nEnsure your project structure after previous steps are executed looks like this\n\n![alt tag](https://raw.github.com/andpor/react-native-sqlite-storage/master/instructions/projectStructureAfter.png)\n\n### Step 6 - Adjust openDatabase call\n\nModify you openDatabase call in your application adding createFromLocation param. If you named your database file in step 2 'testDB' the openDatabase call should look like something like this:\n```js\n\n  ...\n  1.SQLite.openDatabase({name : \"testDB\", createFromLocation : 1}, okCallback,errorCallback);\n  // default - if your folder is called www and data file is named the same as the dbName - testDB in this example\n  2.SQLite.openDatabase({name : \"testDB\", createFromLocation : \"~data/mydbfile.sqlite\"}, okCallback,errorCallback);\n  // if your folder is called data rather than www or your filename does not match the name of the db\n  3.SQLite.openDatabase({name : \"testDB\", createFromLocation : \"/data/mydbfile.sqlite\"}, okCallback,errorCallback);\n  // if your folder is not in app bundle but in app sandbox i.e. downloaded from some remote location.\n  ...\n\n```\nFor Android, the www directory is always relative to the assets directory for the app: src/main/assets\n\nEnjoy!\n\n## Opening a database\n\nOpening a database is slightly different between iOS and Android. Where as on Android the location of the database file is fixed, there are three choices of where the database file can be located on iOS. The 'location' parameter you provide to openDatabase call indicated where you would like the file to be created. This parameter is neglected on Android.\n\nWARNING: the default location on iOS has changed in version 3.0.0 - it is now a no-sync location as mandated by Apple so the release is backward incompatible.\n\n\nTo open a database in default no-sync location (affects iOS *only*)::\n\n```js\nSQLite.openDatabase({name: 'my.db', location: 'default'}, successcb, errorcb);\n```\n\nTo specify a different location (affects iOS *only*):\n\n```js\nSQLite.openDatabase({name: 'my.db', location: 'Library'}, successcb, errorcb);\n```\n\nwhere the `location` option may be set to one of the following choices:\n- `default`: `Library/LocalDatabase` subdirectory - *NOT* visible to iTunes and *NOT* backed up by iCloud\n- `Library`: `Library` subdirectory - backed up by iCloud, *NOT* visible to iTunes\n- `Documents`: `Documents` subdirectory - visible to iTunes and backed up by iCloud\n\nThe original webSql style openDatabase still works and the location will implicitly default to 'default' option:\n\n```js\nSQLite.openDatabase(\"myDatabase.db\", \"1.0\", \"Demo\", -1);\n```\n\n\n## Importing a pre-populated database.\n\nYou can import an existing - prepopulated database file into your application. Depending on your instructions in openDatabase call, the sqlite-storage will look at different places to locate you pre-populated database file.\n\n\nUse this flavor of openDatabase call, if your folder is called www and data file is named the same as the dbName - testDB in this example\n\n```js\nSQLite.openDatabase({name : \"testDB\", createFromLocation : 1}, okCallback,errorCallback);\n```\n\nUse this flavor of openDatabase call if your folder is called data rather than www or your filename does not match the name of the db. In this case db is named testDB but the file is mydbfile.sqlite which is located in a data subdirectory of www\n\n```js\nSQLite.openDatabase({name : \"testDB\", createFromLocation : \"~data/mydbfile.sqlite\"}, okCallback,errorCallback);\n```\n\nUse this flavor of openDatabase call if your folder is not in application bundle but in app sandbox i.e. downloaded from some remote location. In this case the source file is located in data subdirectory of Documents location (iOS) or FilesDir (Android).\n\n```js\nSQLite.openDatabase({name : \"testDB\", createFromLocation : \"/data/mydbfile.sqlite\"}, okCallback,errorCallback);\n```\n\n## Additional options for pre-populated database file\n\nYou can provide additional instructions to sqlite-storage to tell it how to handle your pre-populated database file. By default, the source file is copied over to the internal location which works in most cases but sometimes this is not really an option particularly when the source db file is large. In such situations you can tell sqlite-storage you do not want to copy the file but rather use it in read-only fashion via direct access. You accomplish this by providing an additional optional readOnly parameter to openDatabase call\n\n```js\nSQLite.openDatabase({name : \"testDB\", readOnly: true, createFromLocation : \"/data/mydbfile.sqlite\"}, okCallback,errorCallback);\n```\n\nNote that in this case, the source db file will be open in read-only mode and no updates will be allowed. You cannot delete a database that was open with readOnly option. For Android, the read only option works with pre-populated db files located in FilesDir directory because all other assets are never physically located on the file system but rather read directly from the app bundle.\n\n## Attaching another database\n\nSqlite3 offers the capability to attach another database to an existing database-instance, i.e. for making cross database JOINs available.\nThis feature allows to SELECT and JOIN tables over multiple databases with only one statement and only one database connection.\nTo archieve this, you need to open both databases and to call the attach()-method of the destination (or master) -database to the other ones.\n\n```js\nlet dbMaster, dbSecond;\n\ndbSecond = SQLite.openDatabase({name: 'second'},\n  (db) => {\n    dbMaster = SQLite.openDatabase({name: 'master'},\n      (db) => {\n        dbMaster.attach( \"second\", \"second\", () => console.log(\"Database attached successfully\"), () => console.log(\"ERROR\"))\n      },\n      (err) => console.log(\"Error on opening database 'master'\", err)\n    );\n  },\n  (err) => console.log(\"Error on opening database 'second'\", err)\n);\n```\n\nThe first argument of attach() is the name of the database, which is used in SQLite.openDatabase(). The second argument is the alias, that is used to query on tables of the attached database.\n\nThe following statement would select data from the master database and include the \"second\"-database within a simple SELECT/JOIN-statement:\n\n```sql\nSELECT * FROM user INNER JOIN second.subscriptions s ON s.user_id = user.id\n```\n\nTo detach a database, just use the detach()-method:\n\n```js\ndbMaster.detach( 'second', successCallback, errorCallback );\n```\n\nFor sure, their is also Promise-support available for attach() and detach(), as shown in the example-application under the\ndirectory \"examples\".\n\n# Original Cordova SQLite Bindings from Chris Brody\nhttps://github.com/litehelpers/Cordova-sqlite-storage\n\nThe issues and limitations for the actual SQLite can be found on this site.\n\n## Issues\n\n1. Android binds all numeric SQL input values to double. This is due to the underlying React Native limitation where only a Numeric type is available on the interface point making it ambiguous to distinguish integers from doubles. Once I figure out the proper way to do this I will update the codebase [(Issue #4141)] (https://github.com/facebook/react-native/issues/4141).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/andpor/react-native-sqlite-storage.git"
  },
  "rnpm": {
    "commands": {
      "postlink": "node_modules/react-native-sqlite-storage/scripts/rnpm-postlink.js"
    },
    "ios": {
      "project": "src/ios/SQLite.xcodeproj"
    }
  },
  "scripts": {
    "test": "echo \"Error: no test specified yet\" && exit 1"
  },
  "version": "3.3.4"
}
